#!/usr/bin/python

    """
    Custom topology for Mininet, generated by GraphML-Topo-to-Mininet-Network-Generator.
    """
    from mininet.topo import Topo
    from mininet.net import Mininet
    from mininet.node import RemoteController
    from mininet.node import Node
    from mininet.node import CPULimitedHost
    from mininet.link import TCLink
    from mininet.cli import CLI
    from mininet.log import setLogLevel
    from mininet.util import dumpNodeConnections

    class GeneratedTopo( Topo ):
        "Internet Topology Zoo Specimen."

        def __init__( self, **opts ):
            "Create a topology."

            # Initialize Topology
            Topo.__init__( self, **opts )
    
            # add nodes, switches first...
            Miami = self.addSwitch( 's0' )
        Houston = self.addSwitch( 's1' )
        Washington,DC = self.addSwitch( 's2' )
        Atlanta = self.addSwitch( 's3' )
        MexicoCity = self.addSwitch( 's4' )
        Phoenix = self.addSwitch( 's5' )
        Dallas = self.addSwitch( 's6' )
        StLouis = self.addSwitch( 's7' )
        SanDiego = self.addSwitch( 's8' )
        LosAngeles = self.addSwitch( 's9' )
        SantaClara = self.addSwitch( 's10' )
        Stockton = self.addSwitch( 's11' )
        Sacramento = self.addSwitch( 's12' )
        Fresno = self.addSwitch( 's13' )
        SanFrancisco = self.addSwitch( 's14' )
        NewYork = self.addSwitch( 's15' )
        Boston = self.addSwitch( 's16' )
        Seattle = self.addSwitch( 's17' )
        SaltLakeCity = self.addSwitch( 's18' )
        Chicago = self.addSwitch( 's19' )
        Minneapolis = self.addSwitch( 's20' )
        Detroit = self.addSwitch( 's21' )
        Pittsburg = self.addSwitch( 's22' )
        Philadelphia = self.addSwitch( 's23' )
        Pennsauken = self.addSwitch( 's24' )

            # ... and now hosts
            Miami_host = self.addHost( 'h0' )
        Houston_host = self.addHost( 'h1' )
        Washington,DC_host = self.addHost( 'h2' )
        Atlanta_host = self.addHost( 'h3' )
        MexicoCity_host = self.addHost( 'h4' )
        Phoenix_host = self.addHost( 'h5' )
        Dallas_host = self.addHost( 'h6' )
        StLouis_host = self.addHost( 'h7' )
        SanDiego_host = self.addHost( 'h8' )
        LosAngeles_host = self.addHost( 'h9' )
        SantaClara_host = self.addHost( 'h10' )
        Stockton_host = self.addHost( 'h11' )
        Sacramento_host = self.addHost( 'h12' )
        Fresno_host = self.addHost( 'h13' )
        SanFrancisco_host = self.addHost( 'h14' )
        NewYork_host = self.addHost( 'h15' )
        Boston_host = self.addHost( 'h16' )
        Seattle_host = self.addHost( 'h17' )
        SaltLakeCity_host = self.addHost( 'h18' )
        Chicago_host = self.addHost( 'h19' )
        Minneapolis_host = self.addHost( 'h20' )
        Detroit_host = self.addHost( 'h21' )
        Pittsburg_host = self.addHost( 'h22' )
        Philadelphia_host = self.addHost( 'h23' )
        Pennsauken_host = self.addHost( 'h24' )

            # add edges between switch and corresponding host
            self.addLink( Miami , Miami_host )
        self.addLink( Houston , Houston_host )
        self.addLink( Washington,DC , Washington,DC_host )
        self.addLink( Atlanta , Atlanta_host )
        self.addLink( MexicoCity , MexicoCity_host )
        self.addLink( Phoenix , Phoenix_host )
        self.addLink( Dallas , Dallas_host )
        self.addLink( StLouis , StLouis_host )
        self.addLink( SanDiego , SanDiego_host )
        self.addLink( LosAngeles , LosAngeles_host )
        self.addLink( SantaClara , SantaClara_host )
        self.addLink( Stockton , Stockton_host )
        self.addLink( Sacramento , Sacramento_host )
        self.addLink( Fresno , Fresno_host )
        self.addLink( SanFrancisco , SanFrancisco_host )
        self.addLink( NewYork , NewYork_host )
        self.addLink( Boston , Boston_host )
        self.addLink( Seattle , Seattle_host )
        self.addLink( SaltLakeCity , SaltLakeCity_host )
        self.addLink( Chicago , Chicago_host )
        self.addLink( Minneapolis , Minneapolis_host )
        self.addLink( Detroit , Detroit_host )
        self.addLink( Pittsburg , Pittsburg_host )
        self.addLink( Philadelphia , Philadelphia_host )
        self.addLink( Pennsauken , Pennsauken_host )

            # add edges between switches
            self.addLink( Miami , Atlanta, bw=10, delay='0.444053233558ms')
        self.addLink( Houston , Dallas, bw=10, delay='1.65690128332ms')
        self.addLink( Washington,DC , Atlanta, bw=10, delay='0.557636936322ms')
        self.addLink( Washington,DC , Philadelphia, bw=10, delay='0.372209320106ms')
        self.addLink( Atlanta , Dallas, bw=10, delay='0.544782086448ms')
        self.addLink( Atlanta , NewYork, bw=10, delay='1.06171188686ms')
        self.addLink( MexicoCity , Dallas, bw=10, delay='1.07937457794ms')
        self.addLink( Phoenix , LosAngeles, bw=10, delay='0.343709457969ms')
        self.addLink( Phoenix , Dallas, bw=10, delay='0.16376087071ms')
        self.addLink( Dallas , StLouis, bw=10, delay='0.256389964194ms')
        self.addLink( StLouis , Chicago, bw=10, delay='1.12827896944ms')
        self.addLink( SanDiego , LosAngeles, bw=10, delay='0.681264950821ms')
        self.addLink( LosAngeles , SantaClara, bw=10, delay='0.572239087686ms')
        self.addLink( LosAngeles , Sacramento, bw=10, delay='0.218145394111ms')
        self.addLink( LosAngeles , Chicago, bw=10, delay='0.940063437552ms')
        self.addLink( LosAngeles , Pennsauken, bw=10, delay='0.397906988713ms')
        self.addLink( SantaClara , Stockton, bw=10, delay='0.502672442409ms')
        self.addLink( SantaClara , Sacramento, bw=10, delay='0.730623541507ms')
        self.addLink( SantaClara , Fresno, bw=10, delay='0.909402250667ms')
        self.addLink( SantaClara , SanFrancisco, bw=10, delay='0.350748243685ms')
        self.addLink( SanFrancisco , Seattle, bw=10, delay='1.54076081649ms')
        self.addLink( NewYork , Boston, bw=10, delay='0.988474167839ms')
        self.addLink( NewYork , Philadelphia, bw=10, delay='0.686192970166ms')
        self.addLink( Seattle , SaltLakeCity, bw=10, delay='1.18481782828ms')
        self.addLink( Seattle , Chicago, bw=10, delay='0.93027212534ms')
        self.addLink( Chicago , Detroit, bw=10, delay='0.324943942925ms')
        self.addLink( Chicago , Minneapolis, bw=10, delay='1.57459707914ms')
        self.addLink( Detroit , Pittsburg, bw=10, delay='1.09181916437ms')
        self.addLink( Pittsburg , Philadelphia, bw=10, delay='0.363902764199ms')
        self.addLink( Philadelphia , Pennsauken, bw=10, delay='0.0378622210901ms')

    topos = { 'generated': ( lambda: GeneratedTopo() ) }

    # HERE THE CODE DEFINITION OF THE TOPOLOGY ENDS

    # the following code produces an executable script working with a remote controller
    # and providing ssh access to the the mininet hosts from within the ubuntu vm
    controller_ip = ''

    def setupNetwork(controller_ip):
        "Create network and run simple performance test"
        # check if remote controller's ip was set
        # else set it to localhost
        topo = GeneratedTopo()
        if controller_ip == '':
            #controller_ip = '10.0.2.2';
            controller_ip = '127.0.0.1';
        net = Mininet(topo=topo, controller=lambda a: RemoteController( a, ip=controller_ip, port=6633 ), host=CPULimitedHost, link=TCLink)
        return net

    def connectToRootNS( network, switch, ip, prefixLen, routes ):
        "Connect hosts to root namespace via switch. Starts network."
        "network: Mininet() network object"
        "switch: switch to connect to root namespace"
        "ip: IP address for root namespace node"
        "prefixLen: IP address prefix length (e.g. 8, 16, 24)"
        "routes: host networks to route to"
        # Create a node in root namespace and link to switch 0
        root = Node( 'root', inNamespace=False )
        intf = TCLink( root, switch ).intf1
        root.setIP( ip, prefixLen, intf )
        # Start network that now includes link to root namespace
        network.start()
        # Add routes from root ns to hosts
        for route in routes:
            root.cmd( 'route add -net ' + route + ' dev ' + str( intf ) )

    def sshd( network, cmd='/usr/sbin/sshd', opts='-D' ):
        "Start a network, connect it to root ns, and run sshd on all hosts."
        switch = network.switches[ 0 ]  # switch to use
        ip = '10.123.123.1'  # our IP address on host network
        routes = [ '10.0.0.0/8' ]  # host networks to route to
        connectToRootNS( network, switch, ip, 8, routes )
        for host in network.hosts:
            host.cmd( cmd + ' ' + opts + '&' )

        # DEBUGGING INFO
        print
        print "Dumping host connections"
        dumpNodeConnections(network.hosts)
        print
        print "*** Hosts are running sshd at the following addresses:"
        print
        for host in network.hosts:
            print host.name, host.IP()
        print
        print "*** Type 'exit' or control-D to shut down network"
        print
        print "*** For testing network connectivity among the hosts, wait a bit for the controller to create all the routes, then do 'pingall' on the mininet console."
        print

        CLI( network )
        for host in network.hosts:
            host.cmd( 'kill %' + cmd )
        network.stop()


    if __name__ == '__main__':
        setLogLevel('info')
        #setLogLevel('debug')
        sshd( setupNetwork(controller_ip) )
    